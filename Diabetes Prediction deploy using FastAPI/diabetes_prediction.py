# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tdxMtGsYtxStSoD1ZeWYyKODF7w9q0mb

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes dataset (only females)
"""

#loading the diabetes dataset into pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing first 5 rows of dataset
diabetes_dataset.head()

#printing the number of rows and columns in dataset
diabetes_dataset.shape

#getting the statistical measures of dataset
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non diabetic

1 --> diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#seperating data attributes and labels
x = diabetes_dataset.drop(columns = 'Outcome', axis=1)
y = diabetes_dataset['Outcome']

print(x)
print(y)

"""Data standardization"""

scaler=StandardScaler()

scaler.fit(x)

#scaler.fit_transform() to fit and transform at once
standardized_data=scaler.transform(x)

print(standardized_data)

x = standardized_data
y = diabetes_dataset['Outcome']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, stratify=y, random_state=2)

#shape of original, x_train and x_test
print(x.shape, x_train.shape, x_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

#training the support vector classifier
classifier.fit(x_train, y_train)

"""Model evaluation

accuracy socre
"""

#accuracy score on training data
x_train_prediction = classifier.predict(x_train)
x_train_accuracy = accuracy_score(x_train_prediction, y_train)

print("Accuracy of training data : ",x_train_accuracy)

#accuracy score on test data
x_test_prediction = classifier.predict(x_test)
x_test_accuracy = accuracy_score(x_test_prediction, y_test)

print("Accuracy of test data : ",x_test_accuracy)

"""Making a Predictive System"""

input_data = (4,110,92,0,0,37.6,0.191,30)

#converting input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the data as we are predicting for only one instance
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

#standardizing the data
standardized_data = scaler.transform(input_data_reshape)
print(standardized_data)

prediction = classifier.predict(standardized_data)
print(prediction)

if(prediction[0] == 0):
  print("The person is non diabetic")
else:
  print("The person is diabetic")

